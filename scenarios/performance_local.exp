#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jun  6 00:52:07 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn bash -c "RUST_LOG=\"info,program_exec=debug\" cargo run --release --features big-array"
match_max 100000

expect -exact "Local node is listening on"
after 100

send -- "mock_calc input/performance/data.json input/performance/program.json"
send -- "\r"

expect -exact "Starting mock program execution..."
set start_program_local_exec [clock clicks -microseconds]
expect -exact "Finished mock execution"
set end_program_local_exec [clock clicks -microseconds]

# calculate time
set time_program_local_exec [expr {($end_program_local_exec - $start_program_local_exec) / 1000000.0}]

set fo [open benchmark_results/local.txt a]
set systemTime [clock seconds]
puts $fo "[clock format $systemTime -format %Y-%m-%dT%H:%M:%S%Z] Time of program local execution: $time_program_local_exec"
close $fo

set fo [open benchmark_results/local.csv a]
puts $fo "[clock format $systemTime -format %Y-%m-%dT%H:%M:%S%Z],$time_program_local_exec"
close $fo

puts "Success!"

send -- "quit"
send -- "\r"
expect eof
