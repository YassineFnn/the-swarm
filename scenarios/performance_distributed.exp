#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jun  6 00:52:07 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn bash -c "RUST_LOG=\"info,program_exec=debug\" cargo run --release --features big-array -- -i"
match_max 100000
# wait for 2 peers to connect
expect -exact "Discovered peer"
expect -exact "Discovered peer"

set start_storage_init [clock clicks -microseconds]

send -- "init"
send -- "\r"
expect -exact "Storage initialized"

set start_data_distribution [clock clicks -microseconds]

send -- "put input/performance/data.json"
send -- "\r"
send -- "\r"
# wait for both in any order
expect -re {(id Vid\(2\) was successfully.*id Vid\(1\) was successfully)|(id Vid\(1\) was successfully.*id Vid\(2\) was successfully)}

set start_program_inclusion [clock clicks -microseconds]

send -- "schedule input/performance/program.json"
send -- "\r"
# only says that it's in queue for inclusion in some event
expect -exact "Program scheduled successfully"
# now it's starting to process
expect -exact "Recognized tx: Execute("
set end_program_inclusion [clock clicks -microseconds]
expect -exact "Starting execution of program"
set start_program_local_exec [clock clicks -microseconds]
expect -exact "Saving results of execution of program"
set end_program_local_exec [clock clicks -microseconds]
expect {
	-timeout 20 -exact "finished execution\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}

set end_program_full_exec_start_data_recollect [clock clicks -microseconds]

send -- "get 1"
send -- "\r"
# match only a few characters
expect {
    -timeout 3 -exact "Vid(1): Data(\[78, 205, 235, 7, 240, 245, 122, 247, 174, 201, 131," {}
    timeout { puts "Did not receive expected response"; exit 1 }
}
set end_data_recollect [clock clicks -microseconds]

send -- "get 2"
send -- "\r"
expect {
    -timeout 3 -exact "Vid(2): Data(\[131, 205, 40, 217, 132, 61, 69, 6, 46, 101, 44," {}
    timeout { puts "Did not receive expected response"; exit 1 }
}

# calculate time
set time_total [expr {($end_data_recollect - $start_storage_init) / 1000000.0}]
set time_storage_init [expr {($start_data_distribution - $start_storage_init) / 1000000.0}]
set time_data_distribution [expr {($start_program_inclusion - $start_data_distribution) / 1000000.0}]

# these 3 are contained in `time_program_total_exec`
set time_program_inclusion [expr {($end_program_inclusion - $start_program_inclusion) / 1000000.0}]
set time_program_local_queue_for_exec [expr {($start_program_local_exec - $end_program_inclusion) / 1000000.0}]
set time_program_local_exec [expr {($end_program_local_exec - $start_program_local_exec) / 1000000.0}]

set time_program_total_exec [expr {($end_program_full_exec_start_data_recollect - $start_program_inclusion) / 1000000.0}]
set time_data_recollect [expr {($end_data_recollect - $end_program_full_exec_start_data_recollect) / 1000000.0}]

set fo [open benchmark_results/distributed.txt a]
set systemTime [clock seconds]
puts $fo "[clock format $systemTime -format %Y-%m-%dT%H:%M:%S%Z] test run:"
puts $fo "TOTAL TIME of running the scenario: $time_total"
puts $fo "Time of storage initialization: $time_storage_init"
puts $fo "Time of data distribution: $time_data_distribution"
puts $fo "> local execution (within `full system execution`):"
puts $fo "\tTime of transaction inclusion into block: $time_program_inclusion"
puts $fo "\tTime of program in local execution queue: $time_program_local_queue_for_exec"
puts $fo "\tTime of program local execution: $time_program_local_exec"
puts $fo "Time of program full system execution: $time_program_total_exec"
puts $fo "Time of data recollection: $time_data_recollect"
puts $fo "\n"
close $fo

set fo [open benchmark_results/distributed.csv a]
puts $fo "[clock format $systemTime -format %Y-%m-%dT%H:%M:%S%Z],$time_total,$time_storage_init,$time_data_distribution,$time_program_inclusion,$time_program_local_queue_for_exec,$time_program_local_exec,$time_program_total_exec,$time_data_recollect"
close $fo

puts "Success!"

send -- "quit"
send -- "\r"
expect eof
