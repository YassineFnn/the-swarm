#!/usr/bin/expect -f

# NOT WORKING :(

#
# This Expect script was generated by autoexpect on Tue Jun  6 00:52:07 2023
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

# if { $argc != 1 } {
# 	puts "This script requires PID to pause as an argument"
# 	puts "Example: `./run_and_suspend.exp 12345`"
# 	exit 1
# } else {
# 	set PID_FREEZE [lindex $argv 0]
# 	puts $PID_FREEZE
# }

spawn bash ./scenarios/run_and_suspend/run_container.sh
match_max 100000
# wait for all 3 peers to connect
expect {
	-timeout 20 -exact "Discovered peer" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
expect {
	-timeout 20 -exact "Discovered peer" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
expect {
	-timeout 20 -exact "Discovered peer" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "init"
send -- "\r"
expect -exact "Storage initialized"

# Start the timer
set start [clock clicks -microseconds]

send -- "put input/data.json"
send -- "\r"
# wait for both in any order
expect {
	-timeout 20 -re {(id Vid\(2\) was successfully.*id Vid\(1\) was successfully)|(id Vid\(1\) was successfully.*id Vid\(2\) was successfully)} {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "schedule input/program.json"
send -- "\r"
expect -exact "Program scheduled successfully"

# halt a node
# exec kill -STOP $PID_FREEZE
set node_container_name thesis-node-2-1
exec docker pause $node_container_name

expect_user -timeout 10 -exact "continue"

# exec kill -CONT $PID_FREEZE
exec docker unpause $node_container_name

expect {
	-timeout 20 -exact "finished execution\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}

# Calculate the elapsed time
set end [clock clicks -microseconds]
set elapsed [expr {($end - $start) / 1000000.0}]

send -- "get 1"
send -- "\r"
expect {
	-timeout 6 -exact "Vid(1): Data(\[1, 2, 3, 4, 5, 6, 7, 8\])\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "get 2"
send -- "\r"
expect {
	-timeout 6 -exact "Vid(2): Data(\[37, 144, 123, 1, 0, 23, 53, 14\])\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "get 3"
send -- "\r"
expect {
	-timeout 6 -exact "Vid(3): Data(\[36, 146, 120, 5, 5, 17, 50, 6\])\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "get 4"
send -- "\r"
expect {
	-timeout 6 -exact "Vid(4): Data(\[36, 146, 120, 5, 5, 17, 50, 6\])\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "get 5"
send -- "\r"
expect {
	-timeout 6 -exact "Vid(5): Data(\[36, 146, 120, 5, 5, 17, 50, 6\])\r" {}
	timeout { puts "Did not receive expected response"; exit 1 }
}
send -- "quit"
send -- "\r"

# Print the elapsed time
puts "Elapsed time: $elapsed seconds"
puts "Success!"
exec >log 2>&1

expect eof
